{
  "version": 3,
  "sources": ["../../remove-accents/index.js", "dep:match-sorter", "../../match-sorter/dist/match-sorter.esm.js"],
  "sourcesContent": ["var characterMap = {\r\n\t\"\u00C0\": \"A\",\r\n\t\"\u00C1\": \"A\",\r\n\t\"\u00C2\": \"A\",\r\n\t\"\u00C3\": \"A\",\r\n\t\"\u00C4\": \"A\",\r\n\t\"\u00C5\": \"A\",\r\n\t\"\u1EA4\": \"A\",\r\n\t\"\u1EAE\": \"A\",\r\n\t\"\u1EB2\": \"A\",\r\n\t\"\u1EB4\": \"A\",\r\n\t\"\u1EB6\": \"A\",\r\n\t\"\u00C6\": \"AE\",\r\n\t\"\u1EA6\": \"A\",\r\n\t\"\u1EB0\": \"A\",\r\n\t\"\u0202\": \"A\",\r\n\t\"\u00C7\": \"C\",\r\n\t\"\u1E08\": \"C\",\r\n\t\"\u00C8\": \"E\",\r\n\t\"\u00C9\": \"E\",\r\n\t\"\u00CA\": \"E\",\r\n\t\"\u00CB\": \"E\",\r\n\t\"\u1EBE\": \"E\",\r\n\t\"\u1E16\": \"E\",\r\n\t\"\u1EC0\": \"E\",\r\n\t\"\u1E14\": \"E\",\r\n\t\"\u1E1C\": \"E\",\r\n\t\"\u0206\": \"E\",\r\n\t\"\u00CC\": \"I\",\r\n\t\"\u00CD\": \"I\",\r\n\t\"\u00CE\": \"I\",\r\n\t\"\u00CF\": \"I\",\r\n\t\"\u1E2E\": \"I\",\r\n\t\"\u020A\": \"I\",\r\n\t\"\u00D0\": \"D\",\r\n\t\"\u00D1\": \"N\",\r\n\t\"\u00D2\": \"O\",\r\n\t\"\u00D3\": \"O\",\r\n\t\"\u00D4\": \"O\",\r\n\t\"\u00D5\": \"O\",\r\n\t\"\u00D6\": \"O\",\r\n\t\"\u00D8\": \"O\",\r\n\t\"\u1ED0\": \"O\",\r\n\t\"\u1E4C\": \"O\",\r\n\t\"\u1E52\": \"O\",\r\n\t\"\u020E\": \"O\",\r\n\t\"\u00D9\": \"U\",\r\n\t\"\u00DA\": \"U\",\r\n\t\"\u00DB\": \"U\",\r\n\t\"\u00DC\": \"U\",\r\n\t\"\u00DD\": \"Y\",\r\n\t\"\u00E0\": \"a\",\r\n\t\"\u00E1\": \"a\",\r\n\t\"\u00E2\": \"a\",\r\n\t\"\u00E3\": \"a\",\r\n\t\"\u00E4\": \"a\",\r\n\t\"\u00E5\": \"a\",\r\n\t\"\u1EA5\": \"a\",\r\n\t\"\u1EAF\": \"a\",\r\n\t\"\u1EB3\": \"a\",\r\n\t\"\u1EB5\": \"a\",\r\n\t\"\u1EB7\": \"a\",\r\n\t\"\u00E6\": \"ae\",\r\n\t\"\u1EA7\": \"a\",\r\n\t\"\u1EB1\": \"a\",\r\n\t\"\u0203\": \"a\",\r\n\t\"\u00E7\": \"c\",\r\n\t\"\u1E09\": \"c\",\r\n\t\"\u00E8\": \"e\",\r\n\t\"\u00E9\": \"e\",\r\n\t\"\u00EA\": \"e\",\r\n\t\"\u00EB\": \"e\",\r\n\t\"\u1EBF\": \"e\",\r\n\t\"\u1E17\": \"e\",\r\n\t\"\u1EC1\": \"e\",\r\n\t\"\u1E15\": \"e\",\r\n\t\"\u1E1D\": \"e\",\r\n\t\"\u0207\": \"e\",\r\n\t\"\u00EC\": \"i\",\r\n\t\"\u00ED\": \"i\",\r\n\t\"\u00EE\": \"i\",\r\n\t\"\u00EF\": \"i\",\r\n\t\"\u1E2F\": \"i\",\r\n\t\"\u020B\": \"i\",\r\n\t\"\u00F0\": \"d\",\r\n\t\"\u00F1\": \"n\",\r\n\t\"\u00F2\": \"o\",\r\n\t\"\u00F3\": \"o\",\r\n\t\"\u00F4\": \"o\",\r\n\t\"\u00F5\": \"o\",\r\n\t\"\u00F6\": \"o\",\r\n\t\"\u00F8\": \"o\",\r\n\t\"\u1ED1\": \"o\",\r\n\t\"\u1E4D\": \"o\",\r\n\t\"\u1E53\": \"o\",\r\n\t\"\u020F\": \"o\",\r\n\t\"\u00F9\": \"u\",\r\n\t\"\u00FA\": \"u\",\r\n\t\"\u00FB\": \"u\",\r\n\t\"\u00FC\": \"u\",\r\n\t\"\u00FD\": \"y\",\r\n\t\"\u00FF\": \"y\",\r\n\t\"\u0100\": \"A\",\r\n\t\"\u0101\": \"a\",\r\n\t\"\u0102\": \"A\",\r\n\t\"\u0103\": \"a\",\r\n\t\"\u0104\": \"A\",\r\n\t\"\u0105\": \"a\",\r\n\t\"\u0106\": \"C\",\r\n\t\"\u0107\": \"c\",\r\n\t\"\u0108\": \"C\",\r\n\t\"\u0109\": \"c\",\r\n\t\"\u010A\": \"C\",\r\n\t\"\u010B\": \"c\",\r\n\t\"\u010C\": \"C\",\r\n\t\"\u010D\": \"c\",\r\n\t\"C\u0306\": \"C\",\r\n\t\"c\u0306\": \"c\",\r\n\t\"\u010E\": \"D\",\r\n\t\"\u010F\": \"d\",\r\n\t\"\u0110\": \"D\",\r\n\t\"\u0111\": \"d\",\r\n\t\"\u0112\": \"E\",\r\n\t\"\u0113\": \"e\",\r\n\t\"\u0114\": \"E\",\r\n\t\"\u0115\": \"e\",\r\n\t\"\u0116\": \"E\",\r\n\t\"\u0117\": \"e\",\r\n\t\"\u0118\": \"E\",\r\n\t\"\u0119\": \"e\",\r\n\t\"\u011A\": \"E\",\r\n\t\"\u011B\": \"e\",\r\n\t\"\u011C\": \"G\",\r\n\t\"\u01F4\": \"G\",\r\n\t\"\u011D\": \"g\",\r\n\t\"\u01F5\": \"g\",\r\n\t\"\u011E\": \"G\",\r\n\t\"\u011F\": \"g\",\r\n\t\"\u0120\": \"G\",\r\n\t\"\u0121\": \"g\",\r\n\t\"\u0122\": \"G\",\r\n\t\"\u0123\": \"g\",\r\n\t\"\u0124\": \"H\",\r\n\t\"\u0125\": \"h\",\r\n\t\"\u0126\": \"H\",\r\n\t\"\u0127\": \"h\",\r\n\t\"\u1E2A\": \"H\",\r\n\t\"\u1E2B\": \"h\",\r\n\t\"\u0128\": \"I\",\r\n\t\"\u0129\": \"i\",\r\n\t\"\u012A\": \"I\",\r\n\t\"\u012B\": \"i\",\r\n\t\"\u012C\": \"I\",\r\n\t\"\u012D\": \"i\",\r\n\t\"\u012E\": \"I\",\r\n\t\"\u012F\": \"i\",\r\n\t\"\u0130\": \"I\",\r\n\t\"\u0131\": \"i\",\r\n\t\"\u0132\": \"IJ\",\r\n\t\"\u0133\": \"ij\",\r\n\t\"\u0134\": \"J\",\r\n\t\"\u0135\": \"j\",\r\n\t\"\u0136\": \"K\",\r\n\t\"\u0137\": \"k\",\r\n\t\"\u1E30\": \"K\",\r\n\t\"\u1E31\": \"k\",\r\n\t\"K\u0306\": \"K\",\r\n\t\"k\u0306\": \"k\",\r\n\t\"\u0139\": \"L\",\r\n\t\"\u013A\": \"l\",\r\n\t\"\u013B\": \"L\",\r\n\t\"\u013C\": \"l\",\r\n\t\"\u013D\": \"L\",\r\n\t\"\u013E\": \"l\",\r\n\t\"\u013F\": \"L\",\r\n\t\"\u0140\": \"l\",\r\n\t\"\u0141\": \"l\",\r\n\t\"\u0142\": \"l\",\r\n\t\"\u1E3E\": \"M\",\r\n\t\"\u1E3F\": \"m\",\r\n\t\"M\u0306\": \"M\",\r\n\t\"m\u0306\": \"m\",\r\n\t\"\u0143\": \"N\",\r\n\t\"\u0144\": \"n\",\r\n\t\"\u0145\": \"N\",\r\n\t\"\u0146\": \"n\",\r\n\t\"\u0147\": \"N\",\r\n\t\"\u0148\": \"n\",\r\n\t\"\u0149\": \"n\",\r\n\t\"N\u0306\": \"N\",\r\n\t\"n\u0306\": \"n\",\r\n\t\"\u014C\": \"O\",\r\n\t\"\u014D\": \"o\",\r\n\t\"\u014E\": \"O\",\r\n\t\"\u014F\": \"o\",\r\n\t\"\u0150\": \"O\",\r\n\t\"\u0151\": \"o\",\r\n\t\"\u0152\": \"OE\",\r\n\t\"\u0153\": \"oe\",\r\n\t\"P\u0306\": \"P\",\r\n\t\"p\u0306\": \"p\",\r\n\t\"\u0154\": \"R\",\r\n\t\"\u0155\": \"r\",\r\n\t\"\u0156\": \"R\",\r\n\t\"\u0157\": \"r\",\r\n\t\"\u0158\": \"R\",\r\n\t\"\u0159\": \"r\",\r\n\t\"R\u0306\": \"R\",\r\n\t\"r\u0306\": \"r\",\r\n\t\"\u0212\": \"R\",\r\n\t\"\u0213\": \"r\",\r\n\t\"\u015A\": \"S\",\r\n\t\"\u015B\": \"s\",\r\n\t\"\u015C\": \"S\",\r\n\t\"\u015D\": \"s\",\r\n\t\"\u015E\": \"S\",\r\n\t\"\u0218\": \"S\",\r\n\t\"\u0219\": \"s\",\r\n\t\"\u015F\": \"s\",\r\n\t\"\u0160\": \"S\",\r\n\t\"\u0161\": \"s\",\r\n\t\"\u0162\": \"T\",\r\n\t\"\u0163\": \"t\",\r\n\t\"\u021B\": \"t\",\r\n\t\"\u021A\": \"T\",\r\n\t\"\u0164\": \"T\",\r\n\t\"\u0165\": \"t\",\r\n\t\"\u0166\": \"T\",\r\n\t\"\u0167\": \"t\",\r\n\t\"T\u0306\": \"T\",\r\n\t\"t\u0306\": \"t\",\r\n\t\"\u0168\": \"U\",\r\n\t\"\u0169\": \"u\",\r\n\t\"\u016A\": \"U\",\r\n\t\"\u016B\": \"u\",\r\n\t\"\u016C\": \"U\",\r\n\t\"\u016D\": \"u\",\r\n\t\"\u016E\": \"U\",\r\n\t\"\u016F\": \"u\",\r\n\t\"\u0170\": \"U\",\r\n\t\"\u0171\": \"u\",\r\n\t\"\u0172\": \"U\",\r\n\t\"\u0173\": \"u\",\r\n\t\"\u0216\": \"U\",\r\n\t\"\u0217\": \"u\",\r\n\t\"V\u0306\": \"V\",\r\n\t\"v\u0306\": \"v\",\r\n\t\"\u0174\": \"W\",\r\n\t\"\u0175\": \"w\",\r\n\t\"\u1E82\": \"W\",\r\n\t\"\u1E83\": \"w\",\r\n\t\"X\u0306\": \"X\",\r\n\t\"x\u0306\": \"x\",\r\n\t\"\u0176\": \"Y\",\r\n\t\"\u0177\": \"y\",\r\n\t\"\u0178\": \"Y\",\r\n\t\"Y\u0306\": \"Y\",\r\n\t\"y\u0306\": \"y\",\r\n\t\"\u0179\": \"Z\",\r\n\t\"\u017A\": \"z\",\r\n\t\"\u017B\": \"Z\",\r\n\t\"\u017C\": \"z\",\r\n\t\"\u017D\": \"Z\",\r\n\t\"\u017E\": \"z\",\r\n\t\"\u017F\": \"s\",\r\n\t\"\u0192\": \"f\",\r\n\t\"\u01A0\": \"O\",\r\n\t\"\u01A1\": \"o\",\r\n\t\"\u01AF\": \"U\",\r\n\t\"\u01B0\": \"u\",\r\n\t\"\u01CD\": \"A\",\r\n\t\"\u01CE\": \"a\",\r\n\t\"\u01CF\": \"I\",\r\n\t\"\u01D0\": \"i\",\r\n\t\"\u01D1\": \"O\",\r\n\t\"\u01D2\": \"o\",\r\n\t\"\u01D3\": \"U\",\r\n\t\"\u01D4\": \"u\",\r\n\t\"\u01D5\": \"U\",\r\n\t\"\u01D6\": \"u\",\r\n\t\"\u01D7\": \"U\",\r\n\t\"\u01D8\": \"u\",\r\n\t\"\u01D9\": \"U\",\r\n\t\"\u01DA\": \"u\",\r\n\t\"\u01DB\": \"U\",\r\n\t\"\u01DC\": \"u\",\r\n\t\"\u1EE8\": \"U\",\r\n\t\"\u1EE9\": \"u\",\r\n\t\"\u1E78\": \"U\",\r\n\t\"\u1E79\": \"u\",\r\n\t\"\u01FA\": \"A\",\r\n\t\"\u01FB\": \"a\",\r\n\t\"\u01FC\": \"AE\",\r\n\t\"\u01FD\": \"ae\",\r\n\t\"\u01FE\": \"O\",\r\n\t\"\u01FF\": \"o\",\r\n\t\"\u00DE\": \"TH\",\r\n\t\"\u00FE\": \"th\",\r\n\t\"\u1E54\": \"P\",\r\n\t\"\u1E55\": \"p\",\r\n\t\"\u1E64\": \"S\",\r\n\t\"\u1E65\": \"s\",\r\n\t\"X\u0301\": \"X\",\r\n\t\"x\u0301\": \"x\",\r\n\t\"\u0403\": \"\u0413\",\r\n\t\"\u0453\": \"\u0433\",\r\n\t\"\u040C\": \"\u041A\",\r\n\t\"\u045C\": \"\u043A\",\r\n\t\"A\u030B\": \"A\",\r\n\t\"a\u030B\": \"a\",\r\n\t\"E\u030B\": \"E\",\r\n\t\"e\u030B\": \"e\",\r\n\t\"I\u030B\": \"I\",\r\n\t\"i\u030B\": \"i\",\r\n\t\"\u01F8\": \"N\",\r\n\t\"\u01F9\": \"n\",\r\n\t\"\u1ED2\": \"O\",\r\n\t\"\u1ED3\": \"o\",\r\n\t\"\u1E50\": \"O\",\r\n\t\"\u1E51\": \"o\",\r\n\t\"\u1EEA\": \"U\",\r\n\t\"\u1EEB\": \"u\",\r\n\t\"\u1E80\": \"W\",\r\n\t\"\u1E81\": \"w\",\r\n\t\"\u1EF2\": \"Y\",\r\n\t\"\u1EF3\": \"y\",\r\n\t\"\u0200\": \"A\",\r\n\t\"\u0201\": \"a\",\r\n\t\"\u0204\": \"E\",\r\n\t\"\u0205\": \"e\",\r\n\t\"\u0208\": \"I\",\r\n\t\"\u0209\": \"i\",\r\n\t\"\u020C\": \"O\",\r\n\t\"\u020D\": \"o\",\r\n\t\"\u0210\": \"R\",\r\n\t\"\u0211\": \"r\",\r\n\t\"\u0214\": \"U\",\r\n\t\"\u0215\": \"u\",\r\n\t\"B\u030C\": \"B\",\r\n\t\"b\u030C\": \"b\",\r\n\t\"\u010C\u0323\": \"C\",\r\n\t\"\u010D\u0323\": \"c\",\r\n\t\"\u00CA\u030C\": \"E\",\r\n\t\"\u00EA\u030C\": \"e\",\r\n\t\"F\u030C\": \"F\",\r\n\t\"f\u030C\": \"f\",\r\n\t\"\u01E6\": \"G\",\r\n\t\"\u01E7\": \"g\",\r\n\t\"\u021E\": \"H\",\r\n\t\"\u021F\": \"h\",\r\n\t\"J\u030C\": \"J\",\r\n\t\"\u01F0\": \"j\",\r\n\t\"\u01E8\": \"K\",\r\n\t\"\u01E9\": \"k\",\r\n\t\"M\u030C\": \"M\",\r\n\t\"m\u030C\": \"m\",\r\n\t\"P\u030C\": \"P\",\r\n\t\"p\u030C\": \"p\",\r\n\t\"Q\u030C\": \"Q\",\r\n\t\"q\u030C\": \"q\",\r\n\t\"\u0158\u0329\": \"R\",\r\n\t\"\u0159\u0329\": \"r\",\r\n\t\"\u1E66\": \"S\",\r\n\t\"\u1E67\": \"s\",\r\n\t\"V\u030C\": \"V\",\r\n\t\"v\u030C\": \"v\",\r\n\t\"W\u030C\": \"W\",\r\n\t\"w\u030C\": \"w\",\r\n\t\"X\u030C\": \"X\",\r\n\t\"x\u030C\": \"x\",\r\n\t\"Y\u030C\": \"Y\",\r\n\t\"y\u030C\": \"y\",\r\n\t\"A\u0327\": \"A\",\r\n\t\"a\u0327\": \"a\",\r\n\t\"B\u0327\": \"B\",\r\n\t\"b\u0327\": \"b\",\r\n\t\"\u1E10\": \"D\",\r\n\t\"\u1E11\": \"d\",\r\n\t\"\u0228\": \"E\",\r\n\t\"\u0229\": \"e\",\r\n\t\"\u0190\u0327\": \"E\",\r\n\t\"\u025B\u0327\": \"e\",\r\n\t\"\u1E28\": \"H\",\r\n\t\"\u1E29\": \"h\",\r\n\t\"I\u0327\": \"I\",\r\n\t\"i\u0327\": \"i\",\r\n\t\"\u0197\u0327\": \"I\",\r\n\t\"\u0268\u0327\": \"i\",\r\n\t\"M\u0327\": \"M\",\r\n\t\"m\u0327\": \"m\",\r\n\t\"O\u0327\": \"O\",\r\n\t\"o\u0327\": \"o\",\r\n\t\"Q\u0327\": \"Q\",\r\n\t\"q\u0327\": \"q\",\r\n\t\"U\u0327\": \"U\",\r\n\t\"u\u0327\": \"u\",\r\n\t\"X\u0327\": \"X\",\r\n\t\"x\u0327\": \"x\",\r\n\t\"Z\u0327\": \"Z\",\r\n\t\"z\u0327\": \"z\",\r\n};\r\n\r\nvar chars = Object.keys(characterMap).join('|');\r\nvar allAccents = new RegExp(chars, 'g');\r\nvar firstAccent = new RegExp(chars, '');\r\n\r\nvar removeAccents = function(string) {\t\r\n\treturn string.replace(allAccents, function(match) {\r\n\t\treturn characterMap[match];\r\n\t});\r\n};\r\n\r\nvar hasAccents = function(string) {\r\n\treturn !!string.match(firstAccent);\r\n};\r\n\r\nmodule.exports = removeAccents;\r\nmodule.exports.has = hasAccents;\r\nmodule.exports.remove = removeAccents;\r\n", "\nexport * from \"./node_modules/match-sorter/dist/match-sorter.esm.js\"", "import _extends from '@babel/runtime/helpers/esm/extends';\nimport removeAccents from 'remove-accents';\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nmatchSorter.rankings = rankings;\n\nvar defaultBaseSortFn = function defaultBaseSortFn(a, b) {\n  return String(a.rankedValue).localeCompare(String(b.rankedValue));\n};\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\n\nfunction matchSorter(items, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      keys = _options.keys,\n      _options$threshold = _options.threshold,\n      threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold,\n      _options$baseSort = _options.baseSort,\n      baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort,\n      _options$sorter = _options.sorter,\n      sorter = _options$sorter === void 0 ? function (matchedItems) {\n    return matchedItems.sort(function (a, b) {\n      return sortRankedValues(a, b, baseSort);\n    });\n  } : _options$sorter;\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\n  return sorter(matchedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n\n  function reduceItemsToRanked(matches, item, index) {\n    var rankingInfo = getHighestRanking(item, keys, value, options);\n    var rank = rankingInfo.rank,\n        _rankingInfo$keyThres = rankingInfo.keyThreshold,\n        keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;\n\n    if (rank >= keyThreshold) {\n      matches.push(_extends({}, rankingInfo, {\n        item: item,\n        index: index\n      }));\n    }\n\n    return matches;\n  }\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\n\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    var stringItem = item;\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: stringItem,\n      rank: getMatchRanking(stringItem, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        rankedValue = _ref2.rankedValue,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var newRankedValue = rankedValue;\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n      newRankedValue = itemValue;\n    }\n\n    return {\n      rankedValue: newRankedValue,\n      rank: rank,\n      keyIndex: keyIndex,\n      keyThreshold: keyThreshold\n    };\n  }, {\n    rankedValue: item,\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  } // Lower casing before further comparison\n\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  } // starts with\n\n\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH;\n  } // word starts with\n\n\n  if (testString.includes(\" \" + stringToRank)) {\n    return rankings.WORD_STARTS_WITH;\n  } // contains\n\n\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\n\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var matchingInOrderCharCount = 0;\n  var charNumber = 0;\n\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index, J = string.length; j < J; j++) {\n      var stringChar = string[j];\n\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n\n    return -1;\n  }\n\n  function getRanking(spread) {\n    var spreadPercentage = 1 / spread;\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n    return ranking;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n\n  charNumber = firstIndex;\n\n  for (var i = 1, I = stringToRank.length; i < I; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\n\n\nfunction sortRankedValues(a, b, baseSort) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bKeyIndex = b.keyIndex;\n  var same = aRank === bRank;\n\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      // use the base sort function as a tie-breaker\n      return baseSort(a, b);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = \"\" + value; // toString\n\n  if (!keepDiacritics) {\n    value = removeAccents(value);\n  }\n\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\n\nfunction getItemValues(item, key) {\n  if (typeof key === 'object') {\n    key = key.key;\n  }\n\n  var value;\n\n  if (typeof key === 'function') {\n    value = key(item);\n  } else if (item == null) {\n    value = null;\n  } else if (Object.hasOwnProperty.call(item, key)) {\n    value = item[key];\n  } else if (key.includes('.')) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return getNestedValues(key, item);\n  } else {\n    value = null;\n  } // because `value` can also be undefined\n\n\n  if (value == null) {\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return [String(value)];\n}\n/**\n * Given path: \"foo.bar.baz\"\n * And item: {foo: {bar: {baz: 'buzz'}}}\n *   -> 'buzz'\n * @param path a dot-separated set of keys\n * @param item the item to get the value from\n */\n\n\nfunction getNestedValues(path, item) {\n  var keys = path.split('.');\n  var values = [item];\n\n  for (var i = 0, I = keys.length; i < I; i++) {\n    var nestedKey = keys[i];\n    var nestedValues = [];\n\n    for (var j = 0, J = values.length; j < J; j++) {\n      var nestedItem = values[j];\n      if (nestedItem == null) continue;\n\n      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\n        var nestedValue = nestedItem[nestedKey];\n\n        if (nestedValue != null) {\n          nestedValues.push(nestedValue);\n        }\n      } else if (nestedKey === '*') {\n        // ensure that values is an array\n        nestedValues = nestedValues.concat(nestedItem);\n      }\n    }\n\n    values = nestedValues;\n  }\n\n  if (Array.isArray(values[0])) {\n    // keep allowing the implicit wildcard for an array of strings at the end of\n    // the path; don't use `.flat()` because that's not available in node.js v10\n    var result = [];\n    return result.concat.apply(result, values);\n  } // Based on our logic it should be an array of strings by now...\n  // assuming the user's path terminated in strings\n\n\n  return values;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\n\n\nfunction getAllValuesToRank(item, keys) {\n  var allValues = [];\n\n  for (var j = 0, J = keys.length; j < J; j++) {\n    var key = keys[j];\n    var attributes = getKeyAttributes(key);\n    var itemValues = getItemValues(item, key);\n\n    for (var i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i],\n        attributes: attributes\n      });\n    }\n  }\n\n  return allValues;\n}\n\nvar defaultKeyAttributes = {\n  maxRanking: Infinity,\n  minRanking: -Infinity\n};\n/**\n * Gets all the attributes for the given key\n * @param key - the key from which the attributes will be retrieved\n * @return object containing the key's attributes\n */\n\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    return defaultKeyAttributes;\n  }\n\n  return _extends({}, defaultKeyAttributes, key);\n}\n/*\neslint\n  no-continue: \"off\",\n*/\n\nexport { defaultBaseSortFn, matchSorter, rankings };\n"],
  "mappings": "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",
  "names": ["removeAccents", "defaultBaseSortFn", "matchedItems", "matchChar", "spread", "removeAccents"]
}
