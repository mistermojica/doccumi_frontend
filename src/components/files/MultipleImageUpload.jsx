/* eslint-disable react/no-unused-state */
/* eslint-disable no-console */
/* eslint-disable no-unused-vars */

import React, {Component} from 'react';
import axios from 'axios';
// import {v2 as cloudinary} from 'cloudinary';
// import {AdvancedImage} from '@cloudinary/react';
// import {CloudinaryImage} from '@cloudinary/url-gen';

// cloudinary.config({
//   cloud_name: 'omarmojica',
//   api_key: '581677354416132',
//   api_secret: 'ZuLgvxfUmNq75tNNF_8aOO_Zlig'
// });

// const uploadFile = (file) => {
//   cloudinary.uploader
//     .upload(file, {tags: 'basic_sample'})
//     .then(function (image) {
//       console.log();
//       console.log('** File Upload (Promise)');
//       console.log(
//         "* public_id for the uploaded image is generated by Cloudinary's service."
//       );
//       console.log(`* ${image.public_id}`);
//       console.log(`* ${image.url}`);
//     })
//     .catch(function (err) {
//       console.log();
//       console.log('** File Upload (Promise)');
//       if (err) {
//         console.warn(err);
//       }
//     });
// };

export default class MultipleImageUpload extends Component {
  fileObj = [];

  fileArray = [];

  urlArray = [];

  constructor(props) {
    super(props);
    this.state = {
      files: [null]
    };
    this.uploadMultipleFiles = this.uploadMultipleFiles.bind(this);
    // this.uploadFiles = this.uploadFiles.bind(this);
  }

  uploadMultipleFiles(e) {
    this.fileObj.push(e.target.files);
    for (let i = 0; i < this.fileObj[0].length; i += 1) {
      const file = this.fileObj[0][i];
      const fileUrl = URL.createObjectURL(file);
      this.fileArray.push(file);
      this.urlArray.push(fileUrl);
    }

    console.log(this.urlArray);
    this.setState({files: this.fileArray});
  }

  uploadFiles(e) {
    e.preventDefault();
    // const {files} = this.state;
    console.log('this.state:', this.state);
    // console.log('files:', files);

    const resPromises = [];

    // const promise = uploadImage(file)
    //   .then((respCloud) => {
    //     return {
    //       success: true,
    //       message: 'Archivo cargado exitosamente.',
    //       result: respCloud
    //     };
    //   })
    //   .catch((errCloud) => {
    //     return {
    //       success: false,
    //       message: 'Error al subir foto. Por favor vuelva a intentarlo.',
    //       result: errCloud
    //     };
    //   });

    // resPromises.push(promise);
    // Promise.all([resPromises])
    //   .then((result) => {
    //     console.log('result:', result);
    //   })
    //   .catch((error) => {
    //     console.log('error:', error);
    //   });
  }

  render() {
    return (
      <form>
        <div className="form-group multi-preview">
          {(this.urlArray || []).map((url) => (
            <img
              key={url.toString()}
              src={url}
              width="100px"
              alt="..."
              style={{margin: '5px'}}
            />
          ))}
        </div>

        <div className="form-group">
          <input
            type="file"
            className="form-control"
            onChange={this.uploadMultipleFiles}
            multiple
          />
        </div>
        <button
          type="button"
          className="btn btn-danger btn-block"
          onClick={this.uploadFiles}
        >
          Upload
        </button>
      </form>
    );
  }
}

const uploadImage = async (file) => {
  const promise = new Promise(function (resolve, reject) {
    const url = 'https://api.cloudinary.com/v1_1/omarmojica/upload';
    // if (file.hasOwnProperty("originFileObj")) {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('folder', 'documi');
    formData.append('api_key', '581677354416132');
    formData.append('upload_preset', 'qwgxkqhq');

    // cloudinary.config({
    //   cloud_name: 'omarmojica',
    //   api_key: '',
    //   api_secret: 'ZuLgvxfUmNq75tNNF_8aOO_Zlig'
    // });

    axios({
      method: 'post',
      url,
      data: formData
    })
      .then((res) => {
        const resobj = res.data;
        resolve(resobj.secure_url);
        return resobj.secure_url;
      })
      .catch((err) => {
        reject(err);
        return err;
      });
    // } else {
    //   foto=file.url;
    //   resolve(file.url);
    // }
  });

  return promise;
};
