{"version":3,"sources":["../../../../src/text-input/src/TextInputField.js"],"names":["majorScale","exports","__webpack_require__","module","description","__webpack_module__","inputWidth","__webpack_exports__","_isPointInArea","placeholder","_factorize","finiteOrDefault","spellCheck","callback","_addGrace","_limitValue","toDegrees","_measureText","HALF_PI","splitBoxProps","toPadding","clipArea","remainingProps","renderText","toFont","PI","each","_toLeftRightCenter","_alignStartEnd","TAU","validationMessage","overrides","id","_capitalize","getRelativePosition","_rlookupByKey","_lookupByKey","_arrayUnique","resolve","getAngleFromPoint","getMaximumSize","_getParentNode","ref","throttled","supportsEventListenerOptions","TextInput","propTypes","FormField","descriptors","isFunction","_attachContext","isRequired","getRtlAdapter","_textX","restoreTextDirection","drawPointLegend","noop","_setMinAndMaxByKey","niceNum","almostWhole","almostEquals","_longestText","_filterBetween","_lookup","_descriptors","mergeIf","uid","debounce","clearCanvas","setsEqual","_elementsEqual","oneOfType","PropTypes","_isClickEvent","_isBetween","_readValueToProps"],"mappings":"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","file":"static/js/2.b30985c2.chunk.js","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { splitBoxProps } from 'ui-box'\nimport { FormField } from '../../form-field'\nimport { useId } from '../../hooks'\nimport { majorScale } from '../../scales'\nimport TextInput from './TextInput'\n\nconst TextInputField = memo(\n  forwardRef(function TextInputField(props, ref) {\n    const id = useId('TextInputField', props.id)\n\n    const {\n      // We are using the id from the state\n      appearance,\n\n      // FormField props\n      description,\n      disabled,\n      hint,\n      id: unusedId,\n\n      // TextInput props\n      inputHeight = majorScale(4),\n      inputWidth = '100%',\n      isInvalid,\n      label,\n      placeholder,\n      required,\n      spellCheck,\n      validationMessage,\n\n      // Rest props are spread on the FormField\n      ...restProps\n    } = props\n\n    /**\n     * Split the wrapper props from the input props.\n     */\n    const { matchedProps, remainingProps } = splitBoxProps(restProps)\n\n    return (\n      <FormField\n        marginBottom={24}\n        label={label}\n        isRequired={required}\n        hint={hint}\n        description={description}\n        validationMessage={validationMessage}\n        labelFor={id}\n        {...matchedProps}\n      >\n        <TextInput\n          id={id}\n          width={inputWidth}\n          height={inputHeight}\n          disabled={disabled}\n          required={required}\n          isInvalid={isInvalid}\n          appearance={appearance}\n          placeholder={placeholder}\n          spellCheck={spellCheck}\n          ref={ref}\n          {...remainingProps}\n        />\n      </FormField>\n    )\n  })\n)\n\nTextInputField.propTypes = {\n  /**\n   * Composes the TextInput component as the base.\n   */\n  ...TextInput.propTypes,\n  ...FormField.propTypes,\n\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Passed on the label as a htmlFor prop.\n   */\n  labelFor: PropTypes.string,\n\n  /**\n   * Whether or not to show an asterix after the label.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * An optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * An optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint. This is unaffected by `isInvalid`.\n   */\n  validationMessage: PropTypes.node,\n\n  /**\n   * The height of the input element.\n   */\n  inputHeight: PropTypes.number,\n\n  /**\n   * The width of the input width.\n   */\n  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n}\n\nexport default TextInputField\n"],"sourceRoot":""}